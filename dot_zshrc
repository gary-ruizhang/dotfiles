## prof if need, don't forget the zprof at end of file
# zmodload zsh/zprof

## Settings
setopt MENU_COMPLETE
# case-insensitive,partial-word and then substring completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# preview directory's content with exa when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
zstyle ':fzf-tab:*' fzf-command fzf

# Enable Ctrl-x-e to edit command line
bindkey -e
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^xe' edit-command-line
bindkey '^x^e' edit-command-line

# bindkey '^w' backward-kill-word
# how zsh decide a word, useful /foo/bar ctrl-w /foo
# autoload -U select-word-style
# select-word-style bash

# only work perfectly solution 
export WORDCHARS=

export EDITOR=nvim
export LANG=en_US.UTF-8

export BAT_THEME="Nord"
export MANPAGER="sh -c 'col -bx | bat -l man -p'"

# use for bash lsp. NOTE not write bash that much, this lsp maybe not useful
export GLOB_PATTERN="**/*@(.sh|.inc|.bash|.command|.zsh|zshrc|zsh_*)"

## Alias
# alias ls to exa
alias ls=exa
alias ll='ls -alF -snewest -I .DS_Store'
alias awk=gawk
alias grep=rg

# alias cat to bat
alias cat=bat

# alias git to hub
eval "$(hub alias -s)"

alias g=git
# gcp which used when want to cherry-pick current newest commit to another branch
# alias not convient for long command
gcp() {
  cherry=$(git show --oneline | head -1 | awk '{ print $1 }')
  echo $cherry | tr -d '\n' | pbcopy
  echo $cherry
}

alias lg=lazygit
alias k=kubectl
alias ks='kubectl -n kube-system'
alias c=cargo
# TODO topgrade just upgrade not install new packages so brew dump file maybe no changes
alias topgrade='topgrade && brew bundle dump --force --file=~/.config/homebrew/Brewfile'
# install on new machine
# brew bundle install --file=~/.config/homebrew/Brewfile

alias vim=nvim
alias vi=nvim

## Tools

# HomeBrew
export PATH="/usr/local/bin:$PATH"
export PATH="/usr/local/sbin:$PATH"
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin
export PATH=$PATH:/Users/ruizhang/.local/bin

# bigdata
export SPARK_HOME="/Users/ruizhang/bigdata/spark-3.2.1-bin-hadoop3.2"
export PATH=$PATH:$SPARK_HOME/bin
# HomeBrew END

## fnm
eval "$(fnm env)"

## fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# alt-c
bindkey "รง" fzf-cd-widget

source ~/.config/fzf-tab/fzf-tab.plugin.zsh

# slow if source but normal for new shell session
export LS_COLORS="$(vivid generate nord)"
export FZF_DEFAULT_COMMAND="fd --type file --color=always"
export FZF_DEFAULT_OPTS="--ansi"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd --type d"

## UI

# starship
eval "$(starship init zsh)"

# solve tmux term color
# export TERM=alacritty

# highlight
source /Users/ruizhang/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

fpath=(/Users/ruizhang/.zsh/zsh-completions/src $fpath)
fpath+=~/.zfunc

autoload -Uz compinit
if [ $(date +'%j') != $(stat -f '%Sm' -t '%j' ~/.zcompdump) ]; then
  compinit
else
  compinit -C
fi

source <(kubectl completion zsh)

export PATH="/usr/local/opt/binutils/bin:$PATH"

export TOOLPREFIX=x86_64-elf-
export QEMU=qemu-system-i386
[ -f "/Users/ruizhang/.ghcup/env" ] && source "/Users/ruizhang/.ghcup/env" # ghcup-env

# z
eval "$(zoxide init zsh)"

source /Users/ruizhang/.config/broot/launcher/bash/br

eval "$(atuin init zsh)"
eval "$(navi widget zsh)"

source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh

export JAVA_HOME=$(/usr/libexec/java_home)

clear-ctrl-r() {
  zle autosuggest-clear
  # TODO clear autosuggestions before list history
  zle _atuin_search_widget
}

zle -N clear-ctrl-r

bindkey '^R' clear-ctrl-r

# ignore commands for zsh-autosuggestions plugin
ZSH_AUTOSUGGEST_HISTORY_IGNORE="g stash*"

# create tmux session
# TODO hard code work path, needed change if workspace path changed
tmux_work() {
  # check if session exists, if not create one, if so attach it
  session="work"
  tmux has-session -t $session 2>/dev/null

  if [ $? != 0 ]; then
    # Use -d to allow the rest of the function to run
    tmux new-session -d -s work -c "/Users/ruizhang/Work/workspace/ivoss_web"
    tmux rename-window npm
    # -d to prevent current window from changing
    tmux new-window -d -n front -c "/Users/ruizhang/Work/workspace/ivoss_web"
    tmux new-window -d -n back -c "/Users/ruizhang/Work/workspace/ivoss_web_service"
    tmux new-window -d -n bss/bigdata -c "/Users/ruizhang/Work/ivoss_bigdata"
    tmux new-window -d -n other -c "/Users/ruizhang"
    tmux new-window -d -n ssh -c "/Users/ruizhang"
    # -d to detach any other client (which there shouldn't be,
    # since you just created the session).
    tmux attach-session -d -t work
  else 
    tmux attach-session -t $session
  fi
}

# remove duplicate in $PATH
typeset -U path

##
# zprof
